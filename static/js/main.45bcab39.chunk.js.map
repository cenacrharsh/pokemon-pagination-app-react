{"version":3,"sources":["PokemonList.js","Pagination.js","App.js","index.js"],"names":["PokemonList","pokemon","map","p","Pagination","gotoNextPage","gotoPrevPage","onClick","App","useState","setPokemon","currentPageUrl","setCurrentPageUrl","nextPageUrl","setNextPageUrl","prevPageUrl","setPrevPageUrl","loading","setLoading","useEffect","cancel","axios","get","cancelToken","CancelToken","c","then","res","console","log","data","next","previous","results","name","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAUeA,MAVf,YAAmC,IAAZC,EAAW,EAAXA,QACrB,OACE,8BACGA,EAAQC,KAAI,SAACC,GAAD,OACX,8BAAcA,GAAJA,SCFH,SAASC,EAAT,GAAqD,IAA/BC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,aACjD,OACE,gCACGA,GAAgB,wBAAQC,QAASD,EAAjB,sBAChBD,GAAgB,wBAAQE,QAASF,EAAjB,qB,oBC8CRG,MA/Cf,WACE,MAA8BC,mBAAS,IAAvC,mBAAOR,EAAP,KAAgBS,EAAhB,KACA,EAA4CD,mBAC1C,qCADF,mBAAOE,EAAP,KAAuBC,EAAvB,KAGA,EAAsCH,qBAAtC,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAAsCL,qBAAtC,mBAAOM,EAAP,KAAoBC,EAApB,KACA,EAA8BP,oBAAS,GAAvC,mBAAOQ,EAAP,KAAgBC,EAAhB,KA2BA,OAzBAC,qBAAU,WAER,IAAIC,EAaJ,OAdAF,GAAW,GAEXG,IACGC,IAAIX,EAAgB,CACnBY,YAAa,IAAIF,IAAMG,aAAY,SAACC,GAAD,OAAQL,EAASK,OAErDC,MAAK,SAACC,GACLC,QAAQC,IAAIF,EAAIG,MAChBZ,GAAW,GACXJ,EAAea,EAAIG,KAAKC,MACxBf,EAAeW,EAAIG,KAAKE,UACxBtB,EAAWiB,EAAIG,KAAKG,QAAQ/B,KAAI,SAACC,GAAD,OAAOA,EAAE+B,YAGtC,kBAAMd,OACZ,CAACT,IASAM,EAAgB,aAGlB,qCACE,cAAC,EAAD,CAAahB,QAASA,IADxB,IAEE,cAACG,EAAD,CACEC,aAAcQ,EAbpB,WACED,EAAkBC,IAY6B,KAC3CP,aAAcS,EAXpB,WACEH,EAAkBG,IAU6B,WC1CnDoB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.45bcab39.chunk.js","sourcesContent":["function PokemonList({ pokemon }) {\r\n  return (\r\n    <div>\r\n      {pokemon.map((p) => (\r\n        <div key={p}>{p}</div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PokemonList;\r\n","import React from \"react\";\r\n\r\nexport default function Pagination({ gotoNextPage, gotoPrevPage }) {\r\n  return (\r\n    <div>\r\n      {gotoPrevPage && <button onClick={gotoPrevPage}>Previous</button>}\r\n      {gotoNextPage && <button onClick={gotoNextPage}>Next</button>}\r\n    </div>\r\n  );\r\n}\r\n","import PokemonList from \"./PokemonList\";\nimport Pagination from \"./Pagination\";\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nfunction App() {\n  const [pokemon, setPokemon] = useState([]);\n  const [currentPageUrl, setCurrentPageUrl] = useState(\n    \"https://pokeapi.co/api/v2/pokemon\"\n  );\n  const [nextPageUrl, setNextPageUrl] = useState();\n  const [prevPageUrl, setPrevPageUrl] = useState();\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    let cancel;\n    axios\n      .get(currentPageUrl, {\n        cancelToken: new axios.CancelToken((c) => (cancel = c)),\n      })\n      .then((res) => {\n        console.log(res.data);\n        setLoading(false);\n        setNextPageUrl(res.data.next);\n        setPrevPageUrl(res.data.previous);\n        setPokemon(res.data.results.map((p) => p.name));\n      });\n    //to prevent race condition if multiple requests we will cancel prev req everytime we make new req\n    return () => cancel();\n  }, [currentPageUrl]);\n\n  function gotoNextPage() {\n    setCurrentPageUrl(nextPageUrl);\n  }\n  function gotoPrevPage() {\n    setCurrentPageUrl(prevPageUrl);\n  }\n\n  if (loading) return \"Loading...\";\n\n  return (\n    <>\n      <PokemonList pokemon={pokemon} />;\n      <Pagination\n        gotoNextPage={nextPageUrl ? gotoNextPage : null}\n        gotoPrevPage={prevPageUrl ? gotoPrevPage : null}\n      />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}